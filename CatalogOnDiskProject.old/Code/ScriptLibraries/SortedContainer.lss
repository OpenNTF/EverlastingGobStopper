'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare



'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Private Class AVL_BSTNode
Declare Class SortedContainer

'++LotusScript Development Environment:2:5:(Declarations):0:10
Const BST_LESS_THAN= -1
Const BST_EQUAL_TO = 0
Const BST_GREATER_THAN = 1


Private Class AVL_BSTNode
'**  AVL Binary Search Tree Node Class
'** This class is used by the AVL_BST class
	
	Public Lesser As AVL_BSTNode
	Public Greater As AVL_BSTNode
	Public Height As Integer
	Public Value As Variant   
	
End Class

Class SortedContainer
'**The SortedContainer provides a way to store objects and variables that can be inserted in any order
'**, and then retrieved in a sorted order.
'**
'** Duplicate values cannot be stored in the container.  However, this can useful for eliminating duplicate
'** values, such as when compilings a list addressees for a generated mail memo it will eliminate duplicate names.
'**
'** To store objects in the tree, you must overide the compare method to provide a sorting mechanism.
	
'* AVL Binary Search Tree
'* AVL is named for two Russian mathematicians, G. M. Adel'son-Vel'skii and E. M. Landis who discovered it
'* It is a self balancing, binary search tree that guarantees accessing any element will take no longer than O( Log(n) )
	
     'PRIVATE PROPERTIES
	Private Start As AVL_BSTNode
	Private NumValues As Long
	Private TypeNameText As String
	
     'PUBLIC PROPERTIES
	Public Property Get Count As Long
          'Returns the number of values in BST
		Count = NumValues
	End Property
	
	Public Sub New( InputType As Variant)
          'Initializes BST
		TypeNameText = Typename( InputType)
		NumValues = 0
		
	End Sub
	
	Private Sub SetValue( Value1 As Variant, Value2 As Variant)
          'This allows you set value1 to value2's value or object reference
		
		If Isobject( Value2) Then
			Set Value1 = Value2
		Else
			Value1 = Value2
		End If                      
		
	End Sub
	
	Private Function IsCorrectDataType(ValueToCheck As Variant) As Integer
          '**Checks to see if an Item is of the correct datatype
		If Strcompare( TypeNameText, Typename(ValueToCheck)) Then
			IsCorrectDataType = True
		Elseif Isobject( ValueToCheck) Then
			If ValueToCheck Isa TypeNameText Then
				IsCorrectDataType = True
			End If
		End If
	End Function
	
	Private Function Max( Value1 As Integer, Value2 As Integer) As Integer
          '**Simple function returns largest of two integers
		If Value1> Value2 Then
			Max = Value1
		Else
			Max = Value2
		End If
	End Function
	
	Private Function height( Node As AVL_BSTNode) As Integer
          '**Computes height of node based on children
		If Node Is Nothing Then
			Height = -1
		Else
			Height = Node.Height
		End If
	End Function
	
	Private Function compareValues( Value1 As Variant, Value2 As Variant) As Integer
          '**Compares Values for insertion, designed to be overridden by sub class
		On Error Goto ErrHandle
		
		If(  Value1 = Value2) Then
			CompareValues= BST_EQUAL_TO
		Elseif Value1 < Value2 Then
			CompareValues= BST_LESS_THAN
		Else
			CompareValues= BST_GREATER_THAN
		End If
		
EndProc:
		Exit Function
		
ErrHandle:
		CompareValues= BST_LESS_THAN
		Resume EndProc
	End Function
	
	Private Sub singleRotateRight( Node1 As AVL_BSTNode)
          '**Used when tree out of balance
		Dim Node2 As AVL_BSTNode
		
		Set Node2 = Node1.Greater
		Set Node1.Greater = Node2.Lesser
		Set Node2.Lesser =Node1
		
		Node2.Height = Max( Height( Node2.Lesser), Height( Node2.Greater)) + 1
		Node1.Height = Max( Height( Node1.Lesser), Height( Node1.Greater)) + 1
		Set Node1 = Node2
		
	End Sub
	
	Private Sub singleRotateLeft( Node1 As AVL_BSTNode)
          '**Used when tree out of balance
		Dim Node2 As AVL_BSTNode
		
		Set Node2 = Node1.Lesser
		Set Node1.Lesser = Node2.Greater
		Set Node2.Greater = Node1
		
		Node2.Height = Max( Height( Node2.Lesser), Height( Node2.Greater)) + 1
		Node1.Height = Max( Height( Node1.Lesser), Height( Node1.Greater)) + 1
		Set Node1 = Node2
	End Sub
	
	Private Sub doubleRotateRight( Node As AVL_BSTNode)
          '**Used when tree out of balance
		SingleRotateLeft Node.Greater
		SingleRotateRight Node
		
	End Sub
	
	Private Sub doubleRotateLeft( Node As AVL_BSTNode)
          '**Used when tree out of balance
		SingleRotateRight Node.Lesser
		SingleRotateLeft Node
		
	End Sub
	
	
	Private Sub balance( Node As AVL_BSTNode)
          '**Balances tree if necessary and computes node height
		Select Case Height( Node.Lesser) - Height( Node.Greater)			
		Case 2:
			If Height( Node.Lesser.Lesser) > Height( Node.Lesser.Greater)  Then
				SingleRotateLeft Node 
			Else
				DoubleRotateLeft Node 
			End If
			
		Case -2: 
			If Height( Node.Greater.Greater) > Height( Node.Greater.Lesser)  Then
				SingleRotateRight Node 
			Else
				DoubleRotateRight Node 
			End If
			
		Case Else
			Node.Height = Max( Height( Node.Lesser), Height( Node.Greater)) + 1			
		End Select
	End Sub
	
	Private Function detachSmallestValue( Node As AVL_BSTNode ) As AVL_BSTNode 
          '**Removes the smallest values out of a tree, rebalances tree, and returns pointer to smallest value
		If Node Is Nothing Then
			Set DetachSmallestValue = Node 
		Else
			If Node.Lesser Is Nothing Then
				Set DetachSmallestValue = Node
				Set Node = Node.Greater
				
			Else
				Set DetachSmallestValue = DetachSmallestValue( Node.Lesser)
				
				If Not DetachSmallestValue Is Nothing Then
					Balance Node
				End If
				
			End If
			
		End If
		
	End Function
	
	Private Function removeRecursive( Node As AVL_BSTNode, ValueToRemove As Variant) As Integer
          '**Searches tree for value and removes
		Dim NextLargestValueNode As AVL_BSTNode
		Dim TempNode As AVL_BSTNode
		
		If Node Is Nothing Then
			RemoveRecursive = False
			
		Else
			Select Case CompareValues( ValueToRemove, Node.Value)
				
			Case BST_EQUAL_TO				
				RemoveRecursive = True
				NumValues = NumValues - 1
				Set NextLargestValueNode = DetachSmallestValue( Node.Greater) 
				
				If Not NextLargestValueNode Is Nothing Then
					Set NextLargestValueNode.Lesser = Node.Lesser
					Set NextLargestValueNode.Greater = Node.Greater
					Delete Node
					Set Node = NextLargestValueNode
					
				Else
					Set TempNode = Node.Lesser
					Delete Node
					
					Set Node = TempNode
					
				End If
				
				If Not Node Is Nothing Then
					Balance Node
				End If
				
			Case BST_LESS_THAN 				
				RemoveRecursive = RemoveRecursive( Node.Lesser, ValueToRemove)
				
			Case Else				
				RemoveRecursive = RemoveRecursive( Node.Greater, ValueToRemove) 
				
			End Select
			
		End If
	End Function
	
	Public Sub takeOut( Values As Variant)		
          '**Check to see if value is valid datatype and then removes from tree
		
		If IsCorrectDataType( Values)  Then
			RemoveRecursive Start, Values
		Elseif Isarray( values) Or Islist( values) Then
			Forall UnknownDataTypeValue In Values
				TakeOut UnknownDataTypeValue
			End Forall
		End If
	End Sub
	
	Public Sub remove( Values As Variant)
		TakeOut Values
	End Sub
	
	Private Function addRecursive( Node As AVL_BSTNode, ValueToAdd As Variant) As Integer
          '**Finds appropriate place to insert value
		
'Node refers to the root of the current sub tree, not necessarily the whole tree
		
		If Node Is Nothing Then
			Set Node = New AVL_BSTNode
			SetValue Node.Value, ValueToAdd
			
			NumValues = NumValues + 1
			AddRecursive = True
		Else
			Select Case CompareValues( ValueToAdd, Node.Value)
				
			Case BST_GREATER_THAN				
				AddRecursive = AddRecursive( Node.Greater, ValueToAdd) 
				If AddRecursive Then
					Balance Node
					
				End If
				
			Case BST_LESS_THAN								
				AddRecursive = AddRecursive( Node.Lesser, ValueToAdd)
				
				If AddRecursive Then
					Balance Node
					
				End If
				
			Case Else
                         'No Repeats allowed - Done
				AddRecursive = False				
			End Select
			
		End If
		
	End Function
	
	Public Sub add( Values As Variant )
          '**Add value to BST, if valid datatype
		
		If IsCorrectDataType( Values)  Then
			AddRecursive Start, Values
		Elseif Isarray( values) Or Islist( values) Then
			Forall UnknownDataTypeValue In Values
				Add UnknownDataTypeValue
			End Forall
		End If
	End Sub
	
	Private Sub unsortedValueCollection( ValueArray As Variant, Count As Integer, Node As AVL_BSTNode)
          '**Collects all items in a pre order traversal
		If Not Node Is Nothing Then
			
			Count = Count +1
			
			SetValue ValueArray( Count), Node.Value
			
			UnsortedValueCollection ValueArray, Count, Node.Lesser
			UnsortedValueCollection ValueArray, Count, Node.Greater
			
		End If
		
	End Sub 
	
	Public Function unsortedArray As Variant
          '**Outputs values in array unsorted 
		Dim ValueArray() As Variant
		Dim Count As Integer
		
		If Not Start Is Nothing Then
			Redim ValueArray(numValues - 1) As Variant
			Count = -1
			
			UnSortedValueCollection ValueArray, Count, Start
			UnsortedArray = ValueArray
		End If
		
	End Function
	
	Private Sub sortedValueCollection( ValueArray As Variant, Count As Integer, Node As AVL_BSTNode)
          '** Collects all items in an inorder traversal          
		If Not Node Is Nothing Then
			
			SortedValueCollection ValueArray, Count, Node.Lesser
			
			Count = Count +1
			
			SetValue ValueArray( Count), Node.Value
			SortedValueCollection ValueArray, Count, Node.Greater
			
		End If
		
	End Sub 
	
	Public Function array As Variant
          '** Outputs sorted values in an array
		Dim ValueArray() As Variant
		Dim Count As Integer
		
		If Not Start Is Nothing Then
			Redim ValueArray(numValues - 1) As Variant
			Count = -1
			
			SortedValueCollection ValueArray, Count, Start
			Array = ValueArray
		End If
		
	End Function
	
	Private Function getValueByKeyRecursive( Key As Variant,  Node As AVL_BSTNode) As Variant
          '**Searchs tree for value using key
		If Not Node Is Nothing Then
			Select Case CompareValues( Key, Node.Value )
			Case BST_LESS_THAN:
				SetValue GetValueByKeyRecursive, GetValueByKeyRecursive( Key,  Node.Lesser)
			Case BST_GREATER_THAN:
				SetValue GetValueByKeyRecursive, GetValueByKeyRecursive( Key,  Node.Greater)
			Case Else
				SetValue GetValueByKeyRecursive, Node.Value 
			End Select
			
		End If
		
	End Function
	
	Public Function getByKey ( Key As Variant) As Variant
          '**Outputs a value matching a key
		SetValue GetByKey, GetValueByKeyRecursive( Key, Start)
		
	End Function
	
	Public Function removeByKey( Key As Variant) As Variant
          'Removes a value matching a key
		SetValue RemoveByKey, GetByKey( Key)
		TakeOut RemoveByKey
		
	End Function
	
	Private Function getPreviousValueRecursive( CurrentValue As Variant, TargetValue As Variant, Node As AVL_BSTNode) As Integer
          '**Searchs tree for value before the current
		If Node Is Nothing Then
			GetPreviousValueRecursive = False
		Else
			Select Case CompareValues(CurrentValue,  Node.Value)
			Case BST_EQUAL_TO:
				If Not Node.Lesser Is Nothing Then
					SetValue TargetValue, GetLargestValue( Node.Lesser )
					GetPreviousValueRecursive = False					
				Else					
					GetPreviousValueRecursive = True
				End If
			Case BST_LESS_THAN:				
				If GetPreviousValueRecursive( CurrentValue, TargetValue, Node.Lesser) Then
					GetPreviousValueRecursive = True
				Else
					GetPreviousValueRecursive = False
				End If				
			Case Else
				If GetPreviousValueRecursive( CurrentValue, TargetValue, Node.Greater) Then					
					SetValue TargetValue, Node.Value
				End If
				GetPreviousValueRecursive = False
			End Select
			
		End If
	End Function
	
	Public Function getPrevious( CurrentValue As Variant) As Variant
          '**Get the value before the current
		
		If IsCorrectDataType( CurrentValue ) Then
			
			GetPreviousValueRecursive CurrentValue , GetPrevious, Start     
			
		End If
		
		
	End Function
	
	Private Function getLargestValue( Node As AVL_BSTNode) As Variant
          '**traverses tree and gets largest value
		Dim TempNode As AVL_BSTNode
		Set TempNode = Node
		Do While Not TempNode.Greater Is Nothing
			Set TempNode = TempNode.Greater
		Loop
		
		SetValue GetLargestValue, TempNode.Value
		
	End Function
	
	Public Function getLast As Variant
          '**Get last or largest value in tree
		If Not Start Is Nothing Then
			
			SetValue GetLast, GetLargestValue( Start)
			
		End If
		
	End Function
	
	Private Function getNextValueRecursive( CurrentValue As Variant, TargetValue As Variant, Node As AVL_BSTNode) As Integer
          '**Searchs tree for value after current
		If Node Is Nothing Then
			GetNextValueRecursive = False
		Else
			Select Case CompareValues(CurrentValue,  Node.Value)
			Case BST_EQUAL_TO:
				If Not Node.Greater Is Nothing Then
					SetValue TargetValue, GetSmallestValue( Node.Greater )
					GetNextValueRecursive = False
				Else
					GetNextValueRecursive = True
				End If
			Case BST_LESS_THAN:
				If GetNextValueRecursive( CurrentValue, TargetValue, Node.Lesser) Then
					SetValue TargetValue, Node.Value
				End If
				GetNextValueRecursive = False
			Case Else
				If GetNextValueRecursive( CurrentValue, TargetValue, Node.Greater) Then
					GetNextValueRecursive = True
				Else
					GetNextValueRecursive = False
				End If
			End Select
		End If
	End Function
	
	Public Function getNext( CurrentValue As Variant) As Variant		
          '**Gets the value after current
		
		If IsCorrectDataType( CurrentValue ) Then
			
			GetNextValueRecursive CurrentValue , GetNext, Start     
			
		End If
		
	End Function
	
	Private Function getSmallestValue( Node As AVL_BSTNode) As Variant
          '**Traverses tree and gets the smallest value
		Dim TempNode As AVL_BSTNode
		Set TempNode = Node
		Do While Not TempNode.Lesser Is Nothing
			Set TempNode = TempNode.Lesser
		Loop
		
		SetValue GetSmallestValue, TempNode.Value
		
	End Function
	
	Public Function getFirst As Variant
          '**Gets first value in the tree
		If Not Start Is Nothing Then
			SetValue GetFirst, GetSmallestValue( Start)
			
		End If
		
	End Function
	
End Class