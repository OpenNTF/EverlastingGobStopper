'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Explicit
Option Compare Nocase
Use "SortedContainer"
'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class SortableEntry
Declare Class SortableEntryFromDoc As SortableEntry
Declare Class SortableEntryFromDB As SortableEntry
Declare Class SortedEntries As SortedContainer
Declare Sub ProcessResults( dblist As SortedEntries, newnote As NotesDocument)
Declare Sub AddLineItemToResults(rtitem As notesrichtextitem, entry As SortableEntry)
Declare Sub AddEntryToResults(rtitem As notesrichtextitem, entries As SortedEntries)
Declare Function ExecuteSearch(searchWords As Variant, strForm As String) As NotesDocument
Declare Sub SearchCatalogForDatabase(searchWords As Variant, dblist As SortedEntries)
Declare Sub SearchLocalFiles( searchWords As Variant, entries As SortedEntries)
Declare Function STRImplode( vValues As Variant, strDelimiter As String) As String
Declare Function getDBCatalog As NotesDatabase
Declare Function countquotes (note As Notesdocument) As Integer

'++LotusScript Development Environment:2:5:(Declarations):0:10
Const ERROR_CAT_FIND_MESSAGE = |Unable to find a searchable database catalog. Make sure you have a connection to your catalog or mail server. 

 The search will now look for matching databases locally.|
Const ERROR_CAT_FIND_TITLE = "Catalog Not Found"
Const ERROR_LOCATING_CATALOG_SERVER = "Unable to locate your specified catalog server.  Trying your mail server ..."
Const LOCAL = "Local"

Const ERROR_CODE_NO_CAT_SERVER = 7000

Const SEARCH_FROM_BOOKMARK = False

Dim exampleSortableEntry As SortableEntry
Dim dbCatalog As Notesdatabase


' We normally would not go for public data members, but we want speed and simplicity
Class SortableEntry
	Public m_strTitle As String
	Public m_strData As String
	Public m_strReplicaID As String
	Public m_strServer As String
	Public m_filename As String
End Class

Class SortableEntryFromDoc As SortableEntry
	
	Sub new ( dbInfo As NotesDocument)
		Dim nameSrv As NotesName
		Dim strReplicaId As Variant
		
		Set nameSrv = New NotesName(dbInfo.GetItemValue("Server")(0))
		Me.m_strTitle = dbInfo.GetItemValue("Title")(0)
		Me.m_strData = nameSrv.Abbreviated
		Me.m_strServer = nameSrv.Canonical
		strReplicaId = Evaluate(|@Trim(@ReplaceSubstring(@Text(ReplicaId; "*");":";""))|, dbInfo)
		Me.m_strReplicaID = strReplicaID(0)
		Me.m_filename = dbInfo.GetItemValue("Pathname")(0)
	End Sub
End Class


Class SortableEntryFromDB As SortableEntry
	
	Sub new ( dbInfo As NotesDatabase)
		Dim nameSrv As NotesName
		If Len(dbInfo.server) = 0 Then
			Me.m_strData = LOCAL
		Else			
			Set nameSrv = New NotesName(dbInfo.server)
			Me.m_strData = nameSrv.Abbreviated
			Me.m_strServer = nameSrv.Canonical
		End If
		Me.m_strTitle = dbInfo.title
		Me.m_strReplicaID = dbInfo.replicaID
		Me.m_filename = dbInfo.filepath
	End Sub
End Class

Class SortedEntries As SortedContainer
	Sub new, SortedContainer( exampleSortableEntry)
		
	End Sub
	
	Private Function compareValues( Value1 As Variant, Value2 As Variant) As Integer
		On Error Goto ErrHandle
		compareValues = Strcompare( Value1.m_strTitle , Value2.m_strTitle)
		If compareValues = 0 Then
			compareValues = Strcompare( Value1.m_strServer, Value2.m_strServer)
			If compareValues = 0 Then
				compareValues = Strcompare( Value1.m_filename, Value2.m_filename)
			End If
		End If
		
EndProc:
		Exit Function
		
ErrHandle:
		CompareValues= BST_EQUAL_TO
		Print Error
		Resume EndProc
	End Function
	
	Public Function addCollection( coll As NotesDocumentCollection)
		Dim note As NotesDocument
		Set note = coll.GetFirstDocument
		
		Do While Not(note Is Nothing)
			Dim sortentry As New SortableEntryFromDoc(note)
			Call Me.add(sortentry)		
			Set note = coll.GetNextDocument(note)
		Loop
	End Function
	
	Public Function addView( view As NotesView)
		Dim note As NotesDocument
		Set note = view.GetFirstDocument
		
		Do While Not(note Is Nothing)
			Dim sortentry As New SortableEntryFromDoc(note)
			Call Me.add(sortentry)		
			Set note = view.GetNextDocument(note)
		Loop
	End Function
	
End Class






'++LotusScript Development Environment:2:2:ProcessResults:1:8
Sub ProcessResults( dblist As SortedEntries, newnote As NotesDocument)
	Dim session As New NotesSession
	Dim rtitem As notesrichtextitem
	Dim rtstyle As notesrichtextstyle
	
	Call newnote.replaceitemvalue("SearchType", "D")
	
	Set rtstyle = session.CreateRichTextStyle
	
	If (newnote.hasitem("Body")) Then
		Set rtitem = newnote.getfirstitem("Body")
	Else
		Set rtitem = New notesrichtextitem(newnote, "body")
	End If
	
	rtstyle.Bold = False
	rtstyle.FontSize = 10
	rtstyle.NotesColor = COLOR_BLACK
	rtstyle.NotesFont = FONT_HELV
	rtstyle.Italic = False
	
	Call rtitem.AppendStyle(rtstyle)
	
	Call addentrytoresults(rtitem, dblist)	
	
End Sub
'++LotusScript Development Environment:2:2:AddLineItemToResults:1:8
Sub AddLineItemToResults(rtitem As notesrichtextitem, entry As SortableEntry)
	Dim strLocalTitle As String
	Dim strLinkTitle As String
	
	If Len( entry.m_filename) = 0 Then
		strLinkTitle = entry.m_strTitle
	Else
		strLinkTitle = entry.m_filename
	End If
	
	Call rtitem.AddLinkByIds(entry.m_strReplicaId, entry.m_strServer, "", "",  strLinkTitle)
	
	Call rtitem.addtab(1)
	
	If Len(entry.m_strTitle) > 60 Then 
		strLocalTitle = Left$(entry.m_strTitle, 57) & "..."
	Else
		strLocalTitle = entry.m_strTitle
	End If
	
	Call rtitem.appendtext(strLocalTitle)
	Call rtitem.addtab(1)
	Call rtitem.appendtext(entry.m_strData )
	Call rtitem.addnewline(2)
End Sub
'++LotusScript Development Environment:2:2:AddEntryToResults:1:8
Sub AddEntryToResults(rtitem As notesrichtextitem, entries As SortedEntries)
	Dim entryArray As Variant
	
	If entries.count >0 Then
		entryArray = entries.array()
		Dim count As Integer
		For count = Lbound( entryArray) To Ubound( entryArray)
			Dim entry As SortableEntry
			Set entry = entryArray( count)
			Call AddLineItemToResults(rtitem, entry)
		Next
		
	End If
	
End Sub
'++LotusScript Development Environment:2:1:ExecuteSearch:1:8
Function ExecuteSearch(searchWords As Variant, strForm As String) As NotesDocument
	Dim session As New NotesSession
	Dim newnote As notesdocument
	Dim dbList As SortedEntries
	
	Set newnote = New notesdocument(session.currentDatabase)
	
	If Len(searchWords(0) ) = 0 Then
		Call newnote.replaceitemvalue("Form",strForm)
		Call newnote.replaceitemvalue("Matches", "0")
		Set ExecuteSearch = newnote
		Exit Function
	End If
	
	
	Set dblist = New SortedEntries()
	
	Call SearchCatalogForDatabase(searchWords, dblist)
	Call SearchLocalFiles( searchWords, dblist)
	
	Call newnote.replaceitemvalue("Form",strForm)
	Call ProcessResults(dbList, newnote)
	
	Call newnote.replaceitemvalue("Matches", Cstr(dbList.count ))
	
	Set ExecuteSearch = newnote
End Function
'++LotusScript Development Environment:2:2:SearchCatalogForDatabase:1:8
Sub SearchCatalogForDatabase(searchWords As Variant, dblist As SortedEntries)
	Dim session As New notessession
	Dim dtSearch As New NotesDateTime("")
	Dim strQuery As String
	Dim sortentry As SortableEntry
	Dim copySearchWords() As Variant
	Dim db As NotesDatabase
	Dim view As NotesView
	
	Set db = getDBCatalog()
	
	If Not db Is Nothing Then
		If db.isFtIndexed Then			
			Redim copySearchWords( Lbound( searchWords) To Ubound( searchWords)) As Variant
			Dim count As Integer
			For count = Lbound( searchWords) To Ubound( searchWords)
				copySearchWords(count) = "[title] = *" & searchWords( count) & "*" & " or " & Searchwords(count) 
			Next
			
			strQuery = |(| & Lcase(strImplode(copySearchWords, |) and (|)) & |)|
			
			Set view = db.getView( "ByReplicaID")
			If Not view Is Nothing Then				
				view.ftSearch strQuery, 0
				dblist.addView view
			Else
				strQuery = strQuery & | and !([DBListInCatalog] = 0)|
				dblist.addCollection db.ftSearch( strQuery, 0)				
			End If
			
		Else
			strQuery =  |Form = "Notefile"& DBListInCatalog != "0" & @Contains(@Lowercase(Title); "| &_
			Lcase(strImplode(searchWords, |") & @Contains(@Lowercase(Title); "|)) & |")|
			dblist.addCollection db.Search(strQuery, dtSearch, 0)			
		End If
	End If
	
End Sub
'++LotusScript Development Environment:2:2:SearchLocalFiles:1:8
Sub SearchLocalFiles( searchWords As Variant, entries As SortedEntries)
'	If SEARCH_FROM_BOOKMARK Then
	Dim session As New notessession
	Dim dbdir As New NotesDBDirectory( "")
	Dim db As notesdatabase		
	
	Set db = dbdir.getFirstDatabase( DATABASE)
	
	Do While Not db Is Nothing
		Dim result As Integer
		result = True
		Forall searchword In searchwords
			result = result And (db.title Like ("*" & searchword & "*"))
		End Forall
		
		If result Then
			Dim entry As New SortableEntryFromDB( db)
			entries.add entry
		End If
		
		Set db = dbdir.getNextDatabase
	Loop
'	End If
End Sub
'++LotusScript Development Environment:2:1:STRImplode:1:8
Function STRImplode( vValues As Variant, strDelimiter As String) As String
	
	If Isarray( vValues) Or Islist( vValues) Then
		Dim strTemp As String
		
		Forall vX In vValues
			If Left(Cstr(vX),1)="""" And Right(Cstr(vX),1)="""" Then 
				vX = Mid(vX,2,Len(vX)-2)
			End If
			strTemp = strTemp & Cstr( vX) & strDelimiter
		End Forall
		
		If Len( strTemp) <> 0 Then
			STRImplode = Left( strTemp, Len(strTemp) - Len( strDelimiter))
		End If
		
	Else
		STRImplode = Cstr( vValues)
	End If
	
End Function
'++LotusScript Development Environment:2:1:getDBCatalog:1:8
Function getDBCatalog As NotesDatabase
	Dim strCatServer As Variant
	Dim session As New NotesSession
	If SEARCH_FROM_BOOKMARK Then
		Set getDBCatalog = dbCatalog
	'db catalog is global
		If (Not getDBCatalog  Is Nothing) Then
			If getDBCatalog.isOpen Then
				Exit Function
			Elseif getDBCatalog .openWithFailover( "", "") Then			
				Exit Function
			End If
		Else
			Set dbCatalog = New NotesDatabase("","")
			Set getDBCatalog = dbCatalog
		End If
		
		strCatServer  = Evaluate(|@LocationGetInfo([CatalogServer])|)
		If Len(strCatServer(0)) > 0 Then
			Call getDBCatalog .openWithFailover( strCatServer(0), "catalog.nsf")
			If Not(getDBCatalog.IsOpen) Then
				Print ERROR_LOCATING_CATALOG_SERVER
			End If
		End If
		
		If Not(getDBCatalog.IsOpen) Then
			strCatServer = session.getEnvironmentString("MailServer", True)
			If Len(strCatServer) > 0 Then
				Call getDBCatalog.openWithFailover(strCatServer, "catalog.nsf")
			End If
		End If
		
		If Not(getDBCatalog.IsOpen) Then
			Msgbox ERROR_CAT_FIND_MESSAGE, 64, ERROR_CAT_FIND_TITLE
			Delete dbCatalog
		End If
	Else
		Set getDBCatalog = session.currentdatabase
	End If
End Function
'++LotusScript Development Environment:2:1:countquotes:1:8
Function countquotes (note As Notesdocument) As Integer
	
	Dim strval As String, ncount As Integer, nbyte As Integer, strtest As String
	strval = note.getitemvalue("SimpleQuery")(0)
	For nbyte= 1 To Len(strval)
		strtest = Mid(strval,nbyte,1)
		If strtest = """" Then 
			ncount = ncount + 1
		End If 
	Next	
	countquotes = ncount
End Function